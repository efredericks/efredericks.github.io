<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-07-24T15:19:05-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">erik fredericks</title><subtitle>this is my homepage</subtitle><author><name>efredericks</name></author><entry><title type="html">fredericks does the roguelikedev tutorial - 4</title><link href="http://localhost:4000/rldev-4.html" rel="alternate" type="text/html" title="fredericks does the roguelikedev tutorial - 4" /><published>2023-07-21T00:00:00-04:00</published><updated>2023-07-21T00:00:00-04:00</updated><id>http://localhost:4000/rldev-4</id><content type="html" xml:base="http://localhost:4000/rldev-4.html"><![CDATA[<hr size="1" />

<ul>
  <li>
    <p><a href="" target="_blank">Week 4 post</a></p>
  </li>
  <li>
    <p><a href="https://github.com/efredericks/RL-MMO" target="_blank">Project repo</a></p>
  </li>
</ul>

<hr size="1" />

<p>This week I spent some time getting a limited chat up and running, along with basic procgen for the map and some extra hooks for HP.  All the screenshots will have the new procgen in there, but I’m going to talk about chat first.</p>

<p>Before starting though, I am pleased to report that this does work in a public environment.  I put the repo on a Google Cloud virtual machine (microinstance) and played it with a friend for a bit.  No lag from either end at this point, though 2 people isn’t really a stress test.  It was more of a “does it actually work outside of my own machine” type of test.</p>

<p>And that, at least, passed just fine.</p>

<div align="center">
  <img src="https://i.imgur.com/LF2TnIl.png" title="yay" alt="yay" />
</div>

<hr />

<h2 id="chat">Chat</h2>

<p>I wanted players to have a limited chat so that they can talk to each other.  Otherwise we lose a bit of the MMO-ness.  In taking a page from RotMG, I thought little speech bubbles would be a good idea.</p>

<div align="center">
  <img src="https://i.imgur.com/dVeW4gc.png" alt="rotmg chat" title="rotmg chat" />
</div>

<p>We’ll get there eventually, but each person only says one thing at a time - there is no buffer.  What I did was to give each <code class="language-plaintext highlighter-rouge">MoveableEntity</code> a chat object - currently a list but that may get pared down a single object.  The list is forced into a mutable tuple - element 0 is the chat message and element 1 is the timer.</p>

<p>The timer will decrement for each game tick that a chat message exists on an entity, allowing me to map opacity to time remaining.  In its current state things decrement quickly, but are visible and <em>functional</em> at least.</p>

<p>The nice bit here is that all <code class="language-plaintext highlighter-rouge">MoveableEntity</code> objects get a chat, so enemies can now talk to you as well!  This will eventually extend to NPCs once they get added.</p>

<p>The screenshot is a bit hard to see below, but the enemies will randomly select a bit of angry flavor text when they’re following you.  The rat is saying ‘!!’ at the moment.</p>

<div align="center">
  <img src="https://i.imgur.com/6hwUJQn.png" alt="rat chat" title="rat chat" />
</div>

<p>Colors and interface are by no means final and currently quite difficult to read, but I figured prettifying it would take a back seat to actual implementation.  Plus then I’d need to add things like text wrapping and all those fun calculations and my eyes glazed over a bit.</p>

<p>Work for future me.</p>

<hr />

<h2 id="procgen">Procgen</h2>

<p>Ok, now for procedural generation.</p>

<p><em>Deep breath</em></p>

<p>I didn’t use <code class="language-plaintext highlighter-rouge">tcod</code>.  I apologize to all.  I just … didn’t feel like rewriting all of my code to handle the <code class="language-plaintext highlighter-rouge">numpy</code> arrays.  In the future that would be a better idea for performance, however for now we’ll just stick with a 2D list.</p>

<p>Otherwise, this proof of concept will never be done.</p>

<p>Anywho, I used the <code class="language-plaintext highlighter-rouge">opensimplex</code> noise library (<a href="https://pypi.org/project/opensimplex/" target="_blank">PyPi reference</a>) and simply mapped ranges to tile values.  As you can see below the level is fairly water-heavy.  I’ll be tweaking this significantly as I go, but I honestly like how it looks at the moment.</p>

<p>Pretty simple mapping that is fun to play with for a ‘standard’ Simplex noise look:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n = opensimplex.noise2(c*zoom, r*zoom)
newtile = "empty"
if n &lt; -0.8 or n &gt; 0.8:     # water2 is not walkable
    newtile = "water2"
elif n &lt; -0.6 or n &gt; 0.6:
    newtile = "water1"
elif n &lt; -0.4 or n &gt; 0.4:
    newtile = "floor2"
elif n &lt; -0.2 or n &gt; 0.2:
    newtile = "floor1"
_map[z][r].append(newtile)
</code></pre></div></div>

<div align="center">
  <b>Floor 1</b><br />
  <img src="https://i.imgur.com/AQV8rp1.png" alt="procgen 1" title="procgen 1" />
</div>

<p>Plus, as you descend in Z-levels the zoom changes as well.  This comes care of a handy utility function I always transpose from p5js:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># map function similar to p5.js
def p5map(n, start1, stop1, start2, stop2): 
    return ((n - start1) / (stop1 - start1)) * (stop2 - start2) + start2
</code></pre></div></div>

<p>–</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># map generation loop
for z in range(self.NUM_LEVELS):
    zoom = p5map(z, 0, self.NUM_LEVELS, 0.1, 0.001)
    ...
</code></pre></div></div>

<div align="center">
  <b>Floor 3</b><br />
  <img src="https://i.imgur.com/QTz0oiZ.png" alt="procgen 2" title="procgen 2" />
</div>

<p>Gives a nice feeling of depth and the environments varying.</p>

<hr />

<h2 id="other">Other</h2>

<p>I also updated the drops/items a bit so that players could eat apples, rather than just collect them.  To make this happen, a new ‘use’ key got added (right now that only eats apples) and heals the player (and plays the associated pickup sound since I didn’t feel like sound hunting at the moment).  To heal the player a new <code class="language-plaintext highlighter-rouge">updateHP</code> function got added to <code class="language-plaintext highlighter-rouge">MoveableEntity</code> that will be the basis of HP management and death.  If <code class="language-plaintext highlighter-rouge">HP</code> &lt; 0, then the function will return <code class="language-plaintext highlighter-rouge">false</code>, otherwise it will cap at the entity’s <code class="language-plaintext highlighter-rouge">maxHP</code> attribute.  No HP overloading planned as of this point.</p>

<p>However, testing this functionality was not really possible as nobody can hurt you.  So, all players got started with 2 HP for a bit just to make sure that all the socket communication was happy.</p>

<p>Test test test!</p>

<p>…then test again.</p>

<p>–</p>

<p>One other bit I added was some sprite management.  Each tile now has a named key, an associated glyph, and a color value (including alpha).  This is all done in hex code on the client-side (I’m making the assumption all game logic happens server-side and all drawing/rendering/UI/sounds happens client-side):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// spritesheet
let SPRITESHEET = {
    // env
    wall1: { sprite: '#', color: '#ccc' },
    wall2: { sprite: '#', color: '#999' },
    floor1: { sprite: '.', color: '#333' },
    floor2: { sprite: '.', color: '#666' },
    water1: { sprite: '~', color: '#008080' },
    water2: { sprite: '~', color: '#0011ee' },
    empty: { sprite: ' ', color: '#000' },
    stairsDown: { sprite: '&gt;', color: '#00ffff' },
    stairsUp: { sprite: '&lt;', color: '#00ffff' },
    ...
}
</code></pre></div></div>

<p>To me, going this route is nicely extensible as I can also tack on sprite images as well if I’d like, or offsets into a spritesheet.  Previously it was all <code class="language-plaintext highlighter-rouge">if</code> checks in code for the exact sprite, so not very programmer-friendly.</p>

<hr />

<p>Next week I plan to work on enemy AI a bit, since right now everything either wanders or follows you.  Also, I’d like to start dipping into accessibility a bit to ensure that the game itself is playable for all.  I don’t have a whole lot of experience in managing that with a canvas, so some additional research is going to be needed.</p>

<p>Here’s a GIF of current playing through a few levels and testing out chatting.  Even though I didn’t need any, I just couldn’t stop myself from picking up some apples.</p>

<div align="center">
  <img src="https://i.imgur.com/ZHLAHK8.gif" alt="playthrough" title="playthrough" />
</div>

<hr />

<p><a href="/rldev-3.html">Last post</a></p>

<p>Next post: TBD</p>]]></content><author><name>efredericks</name></author><category term="discography" /><summary type="html"><![CDATA[chat, procgen, cleanup]]></summary></entry><entry><title type="html">fredericks does the roguelikedev tutorial - 3</title><link href="http://localhost:4000/rldev-3.html" rel="alternate" type="text/html" title="fredericks does the roguelikedev tutorial - 3" /><published>2023-07-14T00:00:00-04:00</published><updated>2023-07-14T00:00:00-04:00</updated><id>http://localhost:4000/rldev-3</id><content type="html" xml:base="http://localhost:4000/rldev-3.html"><![CDATA[<hr size="1" />

<ul>
  <li>
    <p><a href="https://www.reddit.com/r/roguelikedev/comments/152ns71/roguelikedev_does_the_complete_roguelike_tutorial/jsez1go/" target="_blank">Week 3 post</a></p>
  </li>
  <li>
    <p><a href="https://github.com/efredericks/RL-MMO" target="_blank">Project repo</a></p>
  </li>
</ul>

<hr size="1" />

<p>This week was all about refinement and starting to prep things for procedural generation.  Also, this post is probably going to be fairly terse as there were a lot of little updates and I have some other deadlines not related to this.</p>

<p>Here we go!</p>

<hr />

<p>First of all we have a bit of a user interface refinement.  First we have some relevant stats being reported in the game window sidebar (<code class="language-plaintext highlighter-rouge">console.log</code> was getting annoying), some animated CSS background trickery to spice things up, and a new font, <a href="https://fonts.google.com/specimen/Chivo+Mono" target="_blank">Chivo Mono, c/o Google</a>.</p>

<p>For the animated background I just gave my main window a pair of drop shadows and animated their blurriness and placement.  Nothing too crazy, but hits that vaporwave aesthetic that is oh so pleasing.</p>

<p><img src="https://i.imgur.com/W2Cz22N.png" alt="Screenshot" /></p>

<p>Here is the relevant code if you’re interested (we’ll talk about that little checkbox in a bit):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#game-canvas {
    background: #222;
    margin: 0 auto;
    display: block;
    width: 900px;
    /* 640 + 260 */
    height: 480px;
    position: absolute;
    left: 50%;
    top: 50%;

    margin-top: -240px;
    margin-left: -455px;
    /* 900/2 + 10/2 */

    border: 5px solid #eee;
    border-radius: 20px;
    padding: 10px;

    animation: moveShadow ease-in-out 15s infinite;
}

@keyframes moveShadow {
    0% {
        box-shadow: -15px -15px 45px 0 rgba(220, 0, 220, 0.25), 15px 15px 45px 0 rgba(0, 229, 255, 0.25);
    }

    50% {
        box-shadow: 15px -15px 145px 0 rgba(220, 0, 220, 0.25), -15px 15px 145px 0 rgba(0, 229, 255, 0.25);
    }

    100% {
        box-shadow: -15px -15px 45px 0 rgba(220, 0, 220, 0.25), 15px 15px 45px 0 rgba(0, 229, 255, 0.25);
    }
}

</code></pre></div></div>

<p>This is also a good reminder (to myself) that I need to download the font locally, as I was doing some testing in a place without WiFi and defaulting to <code class="language-plaintext highlighter-rouge">monospace</code> wasn’t nearly as nice to look at (for me).</p>

<p>We also have a series of dots in the background that are fudged via some <code class="language-plaintext highlighter-rouge">linear-gradient</code> calls and are the result of me googling “animated CSS background.”  The only thing I changed here is the background color and the original was here: <a href="https://codepen.io/edmundojr/pen/xOYJGw" target="_blank">https://codepen.io/edmundojr/pen/xOYJGw</a>.</p>

<hr />

<p>Next up we have … Z-levels! I mean dungeon depth.  Everything so far has been mainly proof of concept, adding the ability for the dungeon to have floors starts to make it a bit more real.</p>

<p>If you’ve never done this before, it is pretty straightforward. The game map gets a new dimension, that’s about it.  This also means that all references to the map now need to check that dimension as well.</p>

<p>Instead of  <code class="language-plaintext highlighter-rouge">gameMap[r][c]</code> we have <code class="language-plaintext highlighter-rouge">gameMap[z][r][c]</code>.</p>

<p>And the <code class="language-plaintext highlighter-rouge">pos</code> attribute for all <code class="language-plaintext highlighter-rouge">Entity</code> objects get a new <code class="language-plaintext highlighter-rouge">level</code> attribute so we know on which floor they live.</p>

<p>Upon adding this I spent some time quashing bugs, notably one where you could kill enemies on other floors because I forgot to update my attack mechanism (so, if you were on floor 1 and the enemy was on floor 3, as long as you were checking the row/column you could still hit them…).</p>

<p>Another thing I added was stairs, though right now the player’s placement is a bit random upon entering and leaving them - work for future me.</p>

<hr />

<p>After this I wanted to add a bit more non-tutorial bits to it, so we have some sounds!  I took a note out of the <a href="https://nluqo.github.io/broughlike-tutorial/stage7.html" target="_blank">Broughlike tutorial</a> for managing them and found a nice <a href="https://filmcow.itch.io/filmcow-sfx" target="_blank">royalty free sound pack by the group that did Charlie the Unicorn</a>.</p>

<p>Now we have ambient sounds, sound effects upon all sorts of things, and whatnot.  Right now they’re mainly placeholders and absolutely zero sound normalization has been done, but I like it!</p>

<p>The fun bit here is that the pack has a large number of “similar” sounds, so I included them all and provided a bit of randomness for when an event pops.  For instance, there is a group of <code class="language-plaintext highlighter-rouge">bat hit 1</code> through <code class="language-plaintext highlighter-rouge">bat hit 15</code> sounds that are played if the player hits a monster.</p>

<p>For this I added a new global lookup table for each of my sound events with the event name and how many sounds are available.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// pick a random index for each sound on [1,len]
let soundMaps = {
    monHit: 2,
    playerHit: 15,
    pickup: 4,
    stairs: 7,
    spawn: 1,
};
</code></pre></div></div>

<p>So if a player hits a monster, I just grab a random number on [1,14] and tack that onto my sound player (<code class="language-plaintext highlighter-rouge">snd</code> is the event name and <code class="language-plaintext highlighter-rouge">sounds</code> hold the loaded audio files and are keyed on the name of the event):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>playSound('playerHit');

// abstracted a bit
playSound = (snd) =&gt; {
    let idx = getRandomInt(1, soundMaps[snd] + 1);
    let key = `${snd}${idx}`;
    sounds[key].currentTime = 0;
    sounds[key].play();
}
</code></pre></div></div>

<p>I also bulk-converted all the <code class="language-plaintext highlighter-rouge">wav</code> files to <code class="language-plaintext highlighter-rouge">ogg</code> in the thought that it would be better for file size.  I did 0 checks to make sure this was the case.</p>

<hr />

<p>Two more things, camera and drops!  First lets talk drops.  I updated my <code class="language-plaintext highlighter-rouge">Entity</code> system a bit to include the type(s) of items that can be dropped as well as how many. Right now all we have are apples so that’s all that can be dropped.  However this is setup in a nice little global loot table that I can balance later.</p>

<p>This table lists out all the relevant information for each <em>thing</em> in the game.  A better way would be to sub-class out every single entity (as the Broughlike/TCOD tutorials do), but I wanted everything in one concise place.</p>

<p>Note: this is <strong>terrible</strong> for human error - everything is keyed on something typed out multiple times.  Just keep piling on the technical debt to get to that minimum viable product.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LOOKUP_STATS = {
    'maxHP': {
        'player': 10,
        'gobbo': 2,
        'snek': 2,
        'rat': 1,
    },
    'sprite': {
        # moveables
        'player': '@',
        'gobbo': 'g',
        'snek': 's',
        'rat': 'r',

        # static
        'apple': 'a',
    },
    # name: list[(tuple(type, max, chance))] - random() &gt; chance
    'drops': {
        'rat': [('apple', 1, 0.25)],
        'gobbo': [('apple', 3, 0.35)],
        'snek': [('apple', 5, 0.5)],
    }
}
</code></pre></div></div>

<blockquote>
  <p>I probably should also create better enemies at some point because writing these out reminds me that I have the sense of humor of a toddler.</p>
</blockquote>

<p>That’s not terribly exciting though and is really just object/state management.  What is fun is scrolling cameras!</p>

<p><img src="https://i.imgur.com/TrwjCX1.gif" alt="Scrolling camera" /></p>

<p>This is always the bane of my existence because I always do this kind of thing by hand (note: Unity/Godot make this ridiculously easy).  However, I’ve done it enough times now that I can cheat by looking at old code and just transplant it.</p>

<p>The basis is here: <a href="https://www.roguebasin.com/index.php/Scrolling_map" target="_blank">https://www.roguebasin.com/index.php/Scrolling_map</a></p>

<p>Essentially, we create a viewport around the player and only draw things within that viewport.  Note - this is lovely for performance optimization as you only need to manage visuals for things in view.  You do still need to update AI and whatnot for things off screen, but at least we don’t have to draw it all.</p>

<p>The scrolling camera and larger map are what will be the requirement for my procedural generation as I like large worlds, however keeping it constrained for this use case will be a fun challenge.</p>

<hr />

<p>Last but not least, I started working on the README file so that I could remember how to do things in the future when I invariably run out of time.  The semester start is a month away and that means that it is nigh time for class prep to begin.  How to add enemies and items, etc.</p>

<hr />

<p>Next week I’m planning on adding proper procedural generation, so hoping to either make use of the <code class="language-plaintext highlighter-rouge">tcod</code> library for that or <code class="language-plaintext highlighter-rouge">opensimplex</code>.  Perhaps some drunken walking for caves, we shall see.</p>

<p>Also a slew of bugs/issues to fix, including player placement from stairs.</p>

<hr />

<p><a href="/rldev-2.html">Last post</a></p>

<p><a href="/rldev-4.html">Next post</a></p>]]></content><author><name>efredericks</name></author><category term="discography" /><summary type="html"><![CDATA[Z-levels, UI refinement, camera, sounds, drops]]></summary></entry><entry><title type="html">fredericks does the roguelikedev tutorial - 2</title><link href="http://localhost:4000/rldev-2.html" rel="alternate" type="text/html" title="fredericks does the roguelikedev tutorial - 2" /><published>2023-07-11T00:00:00-04:00</published><updated>2023-07-11T00:00:00-04:00</updated><id>http://localhost:4000/rldev-2</id><content type="html" xml:base="http://localhost:4000/rldev-2.html"><![CDATA[<hr size="1" />

<ul>
  <li>
    <p><a href="https://www.reddit.com/r/roguelikedev/comments/14wuzqa/roguelikedev_does_the_complete_roguelike_tutorial/jrkdlgr/" target="_blank">Week 2 post</a></p>
  </li>
  <li>
    <p><a href="https://github.com/efredericks/RL-MMO" target="_blank">Project repo</a></p>
  </li>
</ul>

<hr size="1" />

<p>This week I wanted to start by turning my “simple” entities into proper objects.  Previously anything that moved was simply a row/column position dictionary.  Nice for prototyping, bad for anything else.</p>

<p>Somewhat following a mishmash of multiple tutorials I created a base <code class="language-plaintext highlighter-rouge">Entity</code> class and a child <code class="language-plaintext highlighter-rouge">MoveableEntity</code> class, where <code class="language-plaintext highlighter-rouge">Entity</code> is intended to not move (e.g., items).  Every object also now gets a unique identifier so that I can track them, care of the <a href="https://docs.python.org/3/library/uuid.html" target="_blank"><code class="language-plaintext highlighter-rouge">uuid</code> Python class</a>.</p>

<p>I may end up needing to refactor as I’m not truly following the tutorial and just using it as an excuse to work on yet another roguelike, however here is where we’re at:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Base entity class
class Entity:
    def __init__(self, _type, pos, entity_id=None, count=None):
        assert _type in ENTITY_NAMES, "Error: ${0} not found in lookup table.".format(_type)

        self.entity_id = entity_id
        self._type = _type
        self.pos = pos
        self.count = count

    def getTransmissable(self):
        return {
            'type': self._type,
            'pos': self.pos,
            'count': self.count,
        }

# Entity that can move around the screen
class MoveableEntity(Entity):
    def __init__(self, _type, pos, entity_id=None):
        super().__init__(_type, pos, entity_id)

        # particulars
        self._type = _type
        self.pos = pos
        self.entity_id = entity_id # only used for logged in players

        # stats
        self.hp = LOOKUP_STATS['maxHP'][_type]
        self.maxHP = LOOKUP_STATS['maxHP'][_type]
        self.active = True
        self.inventory = {}

    def getTransmissable(self):
        return {
            'type': self._type,
            'pos': self.pos,
            'hp': self.hp,
            'maxHP': self.maxHP,
            'active': self.active,
            'inventory': self.inventory,
        }

</code></pre></div></div>

<p>Couple of points here that were important to me.  I have a <code class="language-plaintext highlighter-rouge">LOOKUP_STATS</code> dictionary in global space that serves as my overall balancing table for entity stats - who has what HP, etc.  I also have an <code class="language-plaintext highlighter-rouge">ENTITY_NAMES</code> list that is the global array of the names for all things that can be in the game (mainly as a check to make sure I didn’t typo anywhere when instantiating entities).  Most likely I’ll move those to a dictionary that serves as a name/description table, but that’s for future me (insert technical debt here).</p>

<p>The other bit is the <code class="language-plaintext highlighter-rouge">getTransmissable</code> function.  This serves to break the object down into what gets sent along the socket so that we’re not packaging up the <strong>entire</strong> thing - only what matters to the frontend.  There are probably better ways of doing this, but I’m trying to keep it as light as possible.</p>

<p>So now, I can instantiate everything as an <code class="language-plaintext highlighter-rouge">Entity</code> or <code class="language-plaintext highlighter-rouge">MoveableEntity</code>, neat.</p>

<hr />

<p>Next up is to add in items to be scattered around for the player to pick up.  Here I used my new objects and created a new list focused around items - in this case apples.  Right now they serve no purpose other than to be picked up and added to the player’s inventory, however it works quite nicely.</p>

<div align="center">
  <img src="https://i.imgur.com/YXJFeSn.gif" alt="picking up apples" title="picking up apples" />
</div>

<p>With some additional socket work (i.e., also sending the items array as well as the player inventories) this behavior also works nicely with multiple players.  Not too hard as the logic is pretty much the same as enemy updates and was mostly copy and paste.</p>

<hr />

<p>This leads me to one future point that I should address.  Right now all of my <em>things</em> in the game are separate in that I have a dictionary of players (keyed on the session ID provided by Flask), a list of enemies, and a list of items.  It <em>works</em>, however it really isn’t to my liking for efficiency.  At some point in the near future I’ll merge this into a single Entities object (or perhaps delineate Entities and MoveableEntities) and try to capture the logic into a bastardized Entity-Component pattern.</p>

<hr />

<p>Last update for the week - laying the groundwork for multiple levels/floors/instances/etc.  A new attribute was added to the position of all <code class="language-plaintext highlighter-rouge">Entity</code> objects: <code class="language-plaintext highlighter-rouge">level</code>.</p>

<p>I have a helper function that places the <code class="language-plaintext highlighter-rouge">Entity</code> on a clear spot within the map (no walls, etc.):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    def getRandomPos(self, level=1):
        r = random.randint(0,self.NUM_ROWS-1)
        c = random.randint(0,self.NUM_COLS-1)
        while not self.isWalkable(c, r):
            r = random.randint(0,self.NUM_ROWS-1)
            c = random.randint(0,self.NUM_COLS-1)
        return {'r': r, 'c': c, 'level': level}
</code></pre></div></div>

<p>Now, it takes in the desired <code class="language-plaintext highlighter-rouge">level</code> of the object and includes it as something <em>very</em> easy to lookup.  The change cascades all over the current code, however any time there is a lookup for row/column, now the level is checked as well.  For instance, enemies only follow players on their level, socket data only sends current floor information relevant to the player, etc.</p>

<p>You may have noticed there aren’t any enemies in the last gif - that’s because I spawned them all on level 2 to check that my inventory/pickup system was working without needing to despawn them all:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def addEnemy(self):
    return MoveableEntity("snek", self.getRandomPos(level=2), str(uuid.uuid4()))
</code></pre></div></div>

<hr />

<p>That’s it for now - next week I’m hoping to add a camera system and/or a proper procedural content generation algorithm for the dungeon.  Or focus on a user interface so I don’t need to keep calling <code class="language-plaintext highlighter-rouge">console.log</code> any time I want to see data 🙄.</p>

<hr />

<p><a href="/rldev-1.html">Last post</a></p>

<p><a href="/rldev-3.html">Next post</a></p>]]></content><author><name>efredericks</name></author><category term="discography" /><summary type="html"><![CDATA[objects, items, levels, packet optimization]]></summary></entry><entry><title type="html">fredericks does the roguelikedev tutorial - 1</title><link href="http://localhost:4000/rldev-1.html" rel="alternate" type="text/html" title="fredericks does the roguelikedev tutorial - 1" /><published>2023-07-07T00:00:00-04:00</published><updated>2023-07-07T00:00:00-04:00</updated><id>http://localhost:4000/rldev-1</id><content type="html" xml:base="http://localhost:4000/rldev-1.html"><![CDATA[<hr size="1" />

<p><a href="https://www.reddit.com/r/roguelikedev/comments/14q58js/roguelikedev_does_the_complete_roguelike_tutorial/jqr89ss/" target="_blank">Week 1 post</a></p>
<hr size="1" />

<p>I’ve silently participated in the Reddit (RIP) does the <a href="http://rogueliketutorials.com/tutorials/tcod/v2/" target="_blank">roguelikedev tutorial</a> over the past few years (and have never extended it beyond the basic tutorial - school-related things always seem to come up).  This year I wanted to try something different and we’ll see how it goes.  No guarantees I’ll finish this or that even I’ll make something releasable, but I wanted to have some fun and see where I can get.</p>

<p>I’ve always had a soft spot for grindy MMOs (for example, Ragnarok Online, FlyFF) and fell hard for <a href="https://www.realmofthemadgod.com/" target="_blank">Realm of the Mad God</a> (RotMG) several years ago.  Oddly enough, one of the early contributors who did the maps for RotMG - <a href="https://www.redblobgames.com/" target="_blank">Red Blob Games</a> - also <a href="https://www.redblobgames.com/x/2025-roguelike-dev/" target="_blank">participates in this challenge</a>!</p>

<div align="center">
  <img src="https://media.tenor.com/3QvpUGVoyuIAAAAd/rotmg-realm-of-the-mad-god.gif" alt="RotMG" title="RotMG" />
</div>

<p>Anyway, that’s where my mind wandered this year.  This proof of concept will probably fall outside of the typical <a href="https://roguebasin.com/index.php?title=Berlin_Interpretation" target="_blank">Berlin interpretation</a> of a roguelike, and dare I say, may even become a rogue<em>lite</em>.</p>

<p>Here is the core concept:</p>

<h3 id="roguelike-mechanics-bump-to-attack-tile-based-movement-permadeath-etc-in-a-multiplayer-instanced-environment">Roguelike mechanics (bump to attack, tile-based movement, permadeath, etc.) in a multiplayer, instanced environment</h3>

<p>The fact that multiple players will be participating is not new, however is a tricky thing to address for the typical roguelike given that time moves only when players move.  My design decision here is that time will forever be moving forward (meaning that the game state will update periodically), however players can “remove” themselves from the flow of time if they need to stop and think (or take a break).</p>

<p><em>Or, worst case they can bail on the instance as in RotMG if things don’t work out</em>.</p>

<p>This will be the <strong>meditate</strong> mechanic - players will enter a meditative state where they still exist but are on another plane of existence.  A mechanic which is ripe for abuse and therefore probably will receive a cooldown timer of sorts.</p>

<p>One of my caveats is that, while I will do my best, this will not be a “secure” environment in which I can guarantee that players can’t abuse the client/server mechanic.  If you’re familiar with RotMG (or any multiplayer game really) there was a serious issue with item duplication that went on for some time.  I’m going to handwave that bit and assume I’ll hire a security expert at some point that can fix things.</p>

<p>Anyway, here are my overall goals for the follow-along tutorial series:</p>

<ul>
  <li>
    <p>Client/server architecture where all logic occurs server-side</p>
  </li>
  <li>
    <p>“Standard” tutorial concepts implemented (e.g., multiple dungeon levels, enemies, items, etc.)</p>
  </li>
  <li>
    <p>Different procedural content generation (PCG) methods for the map (BSP, cellular automata, etc.)</p>
  </li>
  <li>
    <p>Camera system to allow large-scale maps to let the PCG shine</p>
  </li>
  <li>
    <p>Ability for players to interact with each other (i.e., via a text chat)</p>
  </li>
</ul>

<p>And some initial architectural/design decisions in no particular order:</p>

<ul>
  <li>
    <p>Server will be in Python to enable me to use <code class="language-plaintext highlighter-rouge">tcod</code> if necessary</p>
  </li>
  <li>
    <p>Client will be in JavaScript/HTML5 and be responsible for rendering/handling player input</p>
  </li>
  <li>
    <p>All code will be open source to enable others to spin up their own instances</p>
  </li>
</ul>

<p>And lastly some stretch goals:</p>

<ul>
  <li>
    <p>Player can select tiles or ASCII</p>
  </li>
  <li>
    <p>Players can trade with each other</p>
  </li>
  <li>
    <p>Fog of war for individual players</p>
  </li>
  <li>
    <p>Database implementation will allow persistence (<code class="language-plaintext highlighter-rouge">redis</code> or <code class="language-plaintext highlighter-rouge">SQLite</code>)</p>
  </li>
</ul>

<p>I don’t plan to checkpoint this at all as I go so the eventual repository will be one single <code class="language-plaintext highlighter-rouge">main</code> tree, but I’ll try to highlight things that are “interesting” for others in these posts.</p>

<p>Prior to the Week 1 drop I wanted to get a prototype up and running just to see if I could get Flask to play nicely with web sockets and a JavaScript frontend.  Here is a sample - hot pink is you, green are other players, E are enemies that will either randomly move or follow the closest player. When a player goes dark they are meditating and still exist but aren’t a part of the game until they resume motion.</p>

<p><img src="https://i.imgur.com/YfOeEQv.gif" alt="Sample interactions" /></p>

<hr />

<p><a href="/rldev-2.html">Next post</a></p>]]></content><author><name>efredericks</name></author><category term="discography" /><summary type="html"><![CDATA[introductory post for my participation in roguelikedev tutorial this summer.]]></summary></entry><entry><title type="html">Example for the pagination test</title><link href="http://localhost:4000/yyy-example-copy.html" rel="alternate" type="text/html" title="Example for the pagination test" /><published>2019-11-25T00:00:00-05:00</published><updated>2019-11-25T00:00:00-05:00</updated><id>http://localhost:4000/yyy-example%20copy</id><content type="html" xml:base="http://localhost:4000/yyy-example-copy.html"><![CDATA[<p>Here you can write more about a certain release, e.g. tracklist:</p>
<ol>
  <li>Y</li>
  <li>Yy</li>
  <li>YyY</li>
  <li>YyYy</li>
  <li>YyYyY</li>
</ol>]]></content><author><name>efredericks</name></author><category term="collaborations" /><summary type="html"><![CDATA[This is description of a post. It will appear in the page of it's category with the description or excerpt shown. Clicking each of them will redirect to the page of the post, the same with clicking "Read More"]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/YyY-Cover.png" /><media:content medium="image" url="http://localhost:4000/assets/img/YyY-Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Example for the pagination test</title><link href="http://localhost:4000/yyy-example.html" rel="alternate" type="text/html" title="Example for the pagination test" /><published>2019-10-25T00:00:00-04:00</published><updated>2019-10-25T00:00:00-04:00</updated><id>http://localhost:4000/yyy-example</id><content type="html" xml:base="http://localhost:4000/yyy-example.html"><![CDATA[<p>Here you can write more about a certain release, e.g. tracklist:</p>
<ol>
  <li>Y</li>
  <li>Yy</li>
  <li>YyY</li>
  <li>YyYy</li>
  <li>YyYyY</li>
</ol>]]></content><author><name>efredericks</name></author><category term="collaborations" /><summary type="html"><![CDATA[This is description of a post. It will appear in the page of it's category with the description or excerpt shown. Clicking each of them will redirect to the page of the post, the same with clicking "Read More"]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/YyY-Cover.png" /><media:content medium="image" url="http://localhost:4000/assets/img/YyY-Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Example for the pagination test</title><link href="http://localhost:4000/yyy-example-copy-2.html" rel="alternate" type="text/html" title="Example for the pagination test" /><published>2019-10-24T00:00:00-04:00</published><updated>2019-10-24T00:00:00-04:00</updated><id>http://localhost:4000/yyy-example%20copy%202</id><content type="html" xml:base="http://localhost:4000/yyy-example-copy-2.html"><![CDATA[<p>Here you can write more about a certain release, e.g. tracklist:</p>
<ol>
  <li>Y</li>
  <li>Yy</li>
  <li>YyY</li>
  <li>YyYy</li>
  <li>YyYyY</li>
</ol>]]></content><author><name>efredericks</name></author><category term="collaborations" /><summary type="html"><![CDATA[This is description of a post. It will appear in the page of it's category with the description or excerpt shown. Clicking each of them will redirect to the page of the post, the same with clicking "Read More"]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/YyY-Cover.png" /><media:content medium="image" url="http://localhost:4000/assets/img/YyY-Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Example for the pagination test</title><link href="http://localhost:4000/yyy-example-copy-3.html" rel="alternate" type="text/html" title="Example for the pagination test" /><published>2019-10-20T00:00:00-04:00</published><updated>2019-10-20T00:00:00-04:00</updated><id>http://localhost:4000/yyy-example%20copy%203</id><content type="html" xml:base="http://localhost:4000/yyy-example-copy-3.html"><![CDATA[<p>Here you can write more about a certain release, e.g. tracklist:</p>
<ol>
  <li>Y</li>
  <li>Yy</li>
  <li>YyY</li>
  <li>YyYy</li>
  <li>YyYyY</li>
</ol>]]></content><author><name>efredericks</name></author><category term="collaborations" /><summary type="html"><![CDATA[This is description of a post. It will appear in the page of it's category with the description or excerpt shown. Clicking each of them will redirect to the page of the post, the same with clicking "Read More"]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/YyY-Cover.png" /><media:content medium="image" url="http://localhost:4000/assets/img/YyY-Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Example for the pagination test</title><link href="http://localhost:4000/yyy-example-copy-5.html" rel="alternate" type="text/html" title="Example for the pagination test" /><published>2019-09-25T00:00:00-04:00</published><updated>2019-09-25T00:00:00-04:00</updated><id>http://localhost:4000/yyy-example%20copy%205</id><content type="html" xml:base="http://localhost:4000/yyy-example-copy-5.html"><![CDATA[<p>Here you can write more about a certain release, e.g. tracklist:</p>
<ol>
  <li>Y</li>
  <li>Yy</li>
  <li>YyY</li>
  <li>YyYy</li>
  <li>YyYyY</li>
</ol>]]></content><author><name>efredericks</name></author><category term="collaborations" /><summary type="html"><![CDATA[This is description of a post. It will appear in the page of it's category with the description or excerpt shown. Clicking each of them will redirect to the page of the post, the same with clicking "Read More"]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/YyY-Cover.png" /><media:content medium="image" url="http://localhost:4000/assets/img/YyY-Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Example for the pagination test</title><link href="http://localhost:4000/yyy-example-copy-4.html" rel="alternate" type="text/html" title="Example for the pagination test" /><published>2019-06-25T00:00:00-04:00</published><updated>2019-06-25T00:00:00-04:00</updated><id>http://localhost:4000/yyy-example%20copy%204</id><content type="html" xml:base="http://localhost:4000/yyy-example-copy-4.html"><![CDATA[<p>Here you can write more about a certain release, e.g. tracklist:</p>
<ol>
  <li>Y</li>
  <li>Yy</li>
  <li>YyY</li>
  <li>YyYy</li>
  <li>YyYyY</li>
</ol>]]></content><author><name>efredericks</name></author><category term="collaborations" /><summary type="html"><![CDATA[This is description of a post. It will appear in the page of it's category with the description or excerpt shown. Clicking each of them will redirect to the page of the post, the same with clicking "Read More"]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/YyY-Cover.png" /><media:content medium="image" url="http://localhost:4000/assets/img/YyY-Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>